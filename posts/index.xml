<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Eric&#39;s blog</title>
    <link>http://blog.nginxs.com/posts/</link>
    <description>Recent content in Posts on Eric&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 29 Dec 2020 15:03:33 +0800</lastBuildDate><atom:link href="http://blog.nginxs.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux Force Reboot</title>
      <link>http://blog.nginxs.com/posts/linux-force-reboot/</link>
      <pubDate>Tue, 29 Dec 2020 15:03:33 +0800</pubDate>
      
      <guid>http://blog.nginxs.com/posts/linux-force-reboot/</guid>
      <description> 今天IDC有服务器有两个分区变为只读分区，首先处理我想想卸载分区实行修复在挂载，无法卸载，然后考虑到线上服务器有备机，所以索性就直接重启下，执行 reboot 结果没响应，init 6 同样没响应。然后拿起电话准备给IDC 打电话重，后来想下肯定有办法重启的，就 google 了一下，果然找到了办法。执行下面两条命令：
# echo 1 &amp;gt; /proc/sys/kernel/sysrq # echo b &amp;gt; /proc/sysrq-trigger   /proc/sys/kernel/sysrq
向sysrq文件中写入1是为了开启SysRq功能.根据linux/Documentations/sysrq.txt中所说：SysRq代表的是Magic System Request Key。开启了这个功能以后，只要内核没有挂掉，它就会响应你要求的任何操作。但是这需要内核支持(CONFIG_MAGIC_SYSRQ选项)。向/proc/sys/kernel/sysrq中写入0是关闭sysrq功能，写入1是开启，其他选项请参考sysrq.txt。需要注意的是，/proc/sys/kernel/sysrq中的值只影响键盘的操作。
那么怎么使用SysRq键呢?
在x86平台上，组合键” + SysRq + “组成SysRq键以完成各种功能。但是，在一些键盘上可能没有SysRq键。SysRq键实际上就是”Print Screen“键。并且可能有些键盘不支持同时按三个按键，所以你可以”按住ALT键“，”按一下SysRq键“，再”按一下键“，如果你运气好的话，这个会有效果的。不过放心，现在的键盘一般都支持同时按3个或3个以上的键。
有很多，这里只挑几个来说，其他的可以参考sysrq.txt文件。  • ’b’ —— 将会立即重启系统，并且不会管你有没有数据没有写回磁盘，也不卸载磁盘，而是完完全全的立即关机 • ’o’ —— 将会关机 • ’s’ —— 将会同步所有以挂在的文件系统 • ’u’ —— 将会重新将所有的文件系统挂在为只读属性  /proc/sysrq-trigger
从文件名字就可以看出来这两个是有关系的。
写入/proc/sysrq-trigger中的字符其实就是sysrq.txt中说的键所对应的字符，其功能也和上述一样。 所以，这两行命令先开启SysRq功能，然后用’b&amp;rsquo;命令让计算机立刻重启。  注意: 你可以在执行玩 rm -rf / 后执行 强制重启命令，因为reboot 和 poweroff 已经都不能用了 </description>
    </item>
    
    <item>
      <title>My First Post</title>
      <link>http://blog.nginxs.com/posts/my-first-post/</link>
      <pubDate>Tue, 29 Dec 2020 14:22:03 +0800</pubDate>
      
      <guid>http://blog.nginxs.com/posts/my-first-post/</guid>
      <description> [localhost] # echo &amp;quot;hello world&amp;quot; </description>
    </item>
    
    <item>
      <title>Sed过滤html标签</title>
      <link>http://blog.nginxs.com/posts/sed-del-html/</link>
      <pubDate>Fri, 19 Nov 2010 15:58:42 +0800</pubDate>
      
      <guid>http://blog.nginxs.com/posts/sed-del-html/</guid>
      <description>今天看到这么一道题目·如果过滤html标签 html标签是这样的：
 &amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Hello World&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt; &amp;lt;body&amp;gt;Welcome to the world of regexp!&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt; 当时没犹豫就输入
 [localhost nginx] $&amp;gt; sed &#39;s/&amp;lt;.*&amp;gt;//g&#39; index.html 在nginx服务器上 结果显示空白两行·自己笨没办法·查了下google 原来是这样的
 [localhost nginx] $&amp;gt; sed &#39;s/&amp;lt;[^&amp;lt;]*&amp;gt;//g&#39; index.html Hello World Welcome to the world of regexp! [] 里的正则表达式意思是说 只过滤以 &amp;lt;开头的</description>
    </item>
    
    <item>
      <title>Linux分区错误</title>
      <link>http://blog.nginxs.com/posts/linux-format-error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.nginxs.com/posts/linux-format-error/</guid>
      <description>今天客服出去实施，发现客户的机器安装的RAID 卡属于软RAID，磁盘在Centos 5.9 系统里认出来的是很长的字符串。按照业务需求分区后发现剩下的分区分给 data 目录，在安装界面无法 分区下去，一直停留在格式化 data 数据盘分区。给我通电话后，我果断先让他把系统分区完，数据盘分区先部分，等进入系统后我远程来看问题。再他不分数据盘后系统正常安装完了跟我远程我发现的问题。
 很长字符串为真实RAID卡认出的磁盘，实际的两个磁盘 为 /dev/sda /dev/sdb 是不能挂载操作的。上来我先给他 分区试试，结果报错：
WARNING: Re-reading the partition table failed with error 22: 无效的参数. The kernel still uses the old table. 经过google 发现：
Run &amp;quot;kpartx -a&amp;quot; after FDISK is completed to add all partition mappings on the newly-created multipath device -- EXAMPLE: 然后就用 kpartx -a参数执行 命令：
kpartx -a /dev/mapper/ddf1_4c53492020202020808627c3000000004711471100001450 ls /dev/mapper/ /dev/mapper/ddf1_4c53492020202020808627c3000000004711471100001450p7 刚才分出来的数据盘分区。
 然后格式化： [localhost]# mkfs.ext3 /dev/mapper/ddf1_4c53492020202020808627c3000000004711471100001450p7 创建 LABEL： [localhost]# mkdir /data0 [localhost]# e2label /dev/mapper/ddf1_4c53492020202020808627c3000000004711471100001450p7 /data0 修改 /etc/fstab 实现自动挂载，添加： [localhost]# vim /etc/fastab LABEL=/data0 /data0 ext3 defaults 1 2 </description>
    </item>
    
  </channel>
</rss>
